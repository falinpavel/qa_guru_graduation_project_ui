{"uid":"791531e7e16e6148","name":"test_add_smartphone_of_brand_apple_iphone_to_user_cart[Apple iPhone 17 256 GB green]","fullName":"tests.tests_catalog.test_add_smartphone_to_user_cart.TestAddSmartphoneToUserCart#test_add_smartphone_of_brand_apple_iphone_to_user_cart","historyId":"09577497a0ddcb55aaecaa36d08dd1e8","time":{"start":1760535617263,"stop":1760535617263,"duration":0},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: <html>\r\n<head><title>504 Gateway Time-out</title></head>\r\n<body bgcolor=\"white\">\r\n<center><h1>504 Gateway Time-out</h1></center>\r\n<hr><center>nginx/1.14.2</center>\r\n</body>\r\n</html>","statusTrace":"context = 'chrome_selenoid'\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def browser_settings(context) -> browser:\n        \"\"\"\n        Основная фикстура для настройки и управления браузером.\n    \n        Эта фикстура автоматически настраивает браузер перед каждым тестом и выполняет\n        очистку после завершения теста. Она обеспечивает:\n        - Инициализацию браузера с правильными настройками\n        - Интеграцию с Allure для красивого логирования шагов\n        - Автоматическое создание скриншотов и артефактов\n        - Корректное завершение сессии браузера\n    \n        Args:\n            context (str): Валидированный контекст выполнения, полученный из фикстуры context.\n    \n        Yields:\n            browser: Настроенный экземпляр браузера Selene для использования в тестах.\n    \n        Фикстура выполняет следующие этапы:\n        1. Настройка браузера перед тестом\n        2. Передача управления тесту (yield)\n        3. Сбор артефактов после теста\n        4. Завершение сессии браузера\n    \n        Логика настройки браузера:\n            - Для локальных контекстов: настройка локального WebDriver\n            - Для Selenoid контекстов: инициализация удаленного WebDriver\n    \n        Сбор артефактов после теста:\n            - Скриншот текущей страницы\n            - Исходный HTML код страницы\n            - Логи браузера\n            - Видео записи (только для Selenoid)\n        \"\"\"\n        # Получаем настройки браузера на основе валидированного контекста\n        options = options_management(context=context)\n    \n        browser.config._wait_decorator = support._logging.wait_with(\n            context=allure_commons._allure.StepContext\n        )\n    \n        with step(\"Настройка параметров браузера\"):\n            if context.endswith(\"selenoid\"):\n>               driver = webdriver.Remote(\n                    command_executor=(\n                        f\"https://{os.getenv('LOGIN_SELENOID')}:\"\n                        f\"{os.getenv('PASSWORD_SELENOID')}@\"\n                        f\"selenoid.autotests.cloud/wd/hub\"\n                        # 0.0.0.0:4444/wd/hub - local selenoid (run docker container)\n                    ),\n                    options=options,\n                )\n\ncontext    = 'chrome_selenoid'\noptions    = <selenium.webdriver.chrome.options.Options object at 0x7fc8fd8bad20>\n\nconftest.py:180: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\ncommand_executor = 'https://user1:1234@selenoid.autotests.cloud/wd/hub'\nkeep_alive = True, file_detector = None\noptions = <selenium.webdriver.chrome.options.Options object at 0x7fc8fd8bad20>\nlocator_converter = None, web_element_cls = None, client_config = None\n\n    def __init__(\n        self,\n        command_executor: Union[str, RemoteConnection] = \"http://127.0.0.1:4444\",\n        keep_alive: bool = True,\n        file_detector: Optional[FileDetector] = None,\n        options: Optional[Union[BaseOptions, list[BaseOptions]]] = None,\n        locator_converter: Optional[LocatorConverter] = None,\n        web_element_cls: Optional[type[WebElement]] = None,\n        client_config: Optional[ClientConfig] = None,\n    ) -> None:\n        \"\"\"Create a new driver that will issue commands using the wire\n        protocol.\n    \n        Parameters:\n        -----------\n        command_executor : str or remote_connection.RemoteConnection\n            - Either a string representing the URL of the remote server or a custom\n            remote_connection.RemoteConnection object. Defaults to 'http://127.0.0.1:4444/wd/hub'.\n        keep_alive : bool (Deprecated)\n            - Whether to configure remote_connection.RemoteConnection to use HTTP keep-alive. Defaults to True.\n        file_detector : object or None\n            - Pass a custom file detector object during instantiation. If None, the default\n                LocalFileDetector() will be used.\n        options : options.Options\n            - Instance of a driver options.Options class.\n        locator_converter : object or None\n            - Custom locator converter to use. Defaults to None.\n        web_element_cls : class\n            - Custom class to use for web elements. Defaults to WebElement.\n        client_config : object or None\n            - Custom client configuration to use. Defaults to None.\n        \"\"\"\n    \n        if options is None:\n            raise TypeError(\n                \"missing 1 required keyword-only argument: 'options' (instance of driver `options.Options` class)\"\n            )\n        elif isinstance(options, list):\n            capabilities = create_matches(options)\n            _ignore_local_proxy = False\n        else:\n            capabilities = options.to_capabilities()\n            _ignore_local_proxy = options._ignore_local_proxy\n        self.command_executor = command_executor\n        if isinstance(self.command_executor, (str, bytes)):\n            self.command_executor = get_remote_connection(\n                capabilities,\n                command_executor=command_executor,\n                keep_alive=keep_alive,\n                ignore_local_proxy=_ignore_local_proxy,\n                client_config=client_config,\n            )\n        self._is_remote = True\n        self.session_id: Optional[str] = None\n        self.caps: dict[str, Any] = {}\n        self.pinned_scripts: dict[str, Any] = {}\n        self.error_handler = ErrorHandler()\n        self._switch_to = SwitchTo(self)\n        self._mobile = Mobile(self)\n        self.file_detector = file_detector or LocalFileDetector()\n        self.locator_converter = locator_converter or LocatorConverter()\n        self._web_element_cls = web_element_cls or self._web_element_cls\n        self._authenticator_id = None\n        self.start_client()\n>       self.start_session(capabilities)\n\n_ignore_local_proxy = False\ncapabilities = {'browserName': 'chrome',\n 'browserVersion': '128.0',\n 'goog:chromeOptions': {'args': ['--disable-gpu',\n                                 '--ignore-certificate-errors',\n                                 '--window-size=1920,1080',\n                                 '--disable-extensions',\n                                 '--disable-popup-blocking',\n                                 '--disable-notifications',\n                                 '--disable-infobars'],\n                        'extensions': []},\n 'pageLoadStrategy': 'eager',\n 'selenoid:options': {'enableLog': True,\n                      'enableVNC': True,\n                      'enableVideo': True}}\nclient_config = None\ncommand_executor = 'https://user1:1234@selenoid.autotests.cloud/wd/hub'\nfile_detector = None\nkeep_alive = True\nlocator_converter = None\noptions    = <selenium.webdriver.chrome.options.Options object at 0x7fc8fd8bad20>\nself       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\nweb_element_cls = None\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:263: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\ncapabilities = {'browserName': 'chrome', 'browserVersion': '128.0', 'goog:chromeOptions': {'args': ['--disable-gpu', '--ignore-certif...ons', '--disable-popup-blocking', '--disable-notifications', ...], 'extensions': []}, 'pageLoadStrategy': 'eager', ...}\n\n    def start_session(self, capabilities: dict) -> None:\n        \"\"\"Creates a new session with the desired capabilities.\n    \n        Parameters:\n        -----------\n        capabilities : dict\n            - A capabilities dict to start the session with.\n        \"\"\"\n    \n        caps = _create_caps(capabilities)\n        try:\n>           response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ncapabilities = {'browserName': 'chrome',\n 'browserVersion': '128.0',\n 'goog:chromeOptions': {'args': ['--disable-gpu',\n                                 '--ignore-certificate-errors',\n                                 '--window-size=1920,1080',\n                                 '--disable-extensions',\n                                 '--disable-popup-blocking',\n                                 '--disable-notifications',\n                                 '--disable-infobars'],\n                        'extensions': []},\n 'pageLoadStrategy': 'eager',\n 'selenoid:options': {'enableLog': True,\n                      'enableVNC': True,\n                      'enableVideo': True}}\ncaps       = {'capabilities': {'alwaysMatch': {'browserName': 'chrome',\n                                  'browserVersion': '128.0',\n                                  'goog:chromeOptions': {'args': ['--disable-gpu',\n                                                                  '--ignore-certificate-errors',\n                                                                  '--window-size=1920,1080',\n                                                                  '--disable-extensions',\n                                                                  '--disable-popup-blocking',\n                                                                  '--disable-notifications',\n                                                                  '--disable-infobars'],\n                                                         'extensions': []},\n                                  'pageLoadStrategy': 'eager',\n                                  'selenoid:options': {'enableLog': True,\n                                                       'enableVNC': True,\n                                                       'enableVideo': True}},\n                  'firstMatch': [{}]}}\nself       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:366: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\ndriver_command = 'newSession'\nparams = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '128.0', 'goog:chromeOptions': {'args': [...-blocking', '--disable-notifications', ...], 'extensions': []}, 'pageLoadStrategy': 'eager', ...}, 'firstMatch': [{}]}}\n\n    def execute(self, driver_command: str, params: Optional[dict[str, Any]] = None) -> dict[str, Any]:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        Parameters:\n        -----------\n        driver_command : str\n            - The name of the command to execute as a string.\n    \n        params : dict\n            - A dictionary of named Parameters to send with the command.\n    \n        Returns:\n        --------\n          dict - The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = cast(RemoteConnection, self.command_executor).execute(driver_command, params)\n    \n        if response:\n>           self.error_handler.check_response(response)\n\ndriver_command = 'newSession'\nparams     = {'capabilities': {'alwaysMatch': {'browserName': 'chrome',\n                                  'browserVersion': '128.0',\n                                  'goog:chromeOptions': {'args': ['--disable-gpu',\n                                                                  '--ignore-certificate-errors',\n                                                                  '--window-size=1920,1080',\n                                                                  '--disable-extensions',\n                                                                  '--disable-popup-blocking',\n                                                                  '--disable-notifications',\n                                                                  '--disable-infobars'],\n                                                         'extensions': []},\n                                  'pageLoadStrategy': 'eager',\n                                  'selenoid:options': {'enableLog': True,\n                                                       'enableVNC': True,\n                                                       'enableVideo': True}},\n                  'firstMatch': [{}]}}\nresponse   = {'status': 504,\n 'value': '<html>\\r\\n'\n          '<head><title>504 Gateway Time-out</title></head>\\r\\n'\n          '<body bgcolor=\"white\">\\r\\n'\n          '<center><h1>504 Gateway Time-out</h1></center>\\r\\n'\n          '<hr><center>nginx/1.14.2</center>\\r\\n'\n          '</body>\\r\\n'\n          '</html>'}\nself       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py:458: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc8fd8bb0b0>\nresponse = {'status': 504, 'value': '<html>\\r\\n<head><title>504 Gateway Time-out</title></head>\\r\\n<body bgcolor=\"white\">\\r\\n<center><h1>504 Gateway Time-out</h1></center>\\r\\n<hr><center>nginx/1.14.2</center>\\r\\n</body>\\r\\n</html>'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n>           raise exception_class(value)\nE           selenium.common.exceptions.WebDriverException: Message: <html>\r\nE           <head><title>504 Gateway Time-out</title></head>\r\nE           <body bgcolor=\"white\">\r\nE           <center><h1>504 Gateway Time-out</h1></center>\r\nE           <hr><center>nginx/1.14.2</center>\r\nE           </body>\r\nE           </html>\n\ne          = <selenium.webdriver.remote.errorhandler.ErrorCode object at 0x7fc8fd8bb020>\nerror_code = 'XPATH_LOOKUP_ERROR'\nerror_codes = ['DETACHED_SHADOW_ROOT',\n 'ELEMENT_CLICK_INTERCEPTED',\n 'ELEMENT_IS_NOT_SELECTABLE',\n 'ELEMENT_NOT_INTERACTABLE',\n 'ELEMENT_NOT_VISIBLE',\n 'IME_ENGINE_ACTIVATION_FAILED',\n 'IME_NOT_AVAILABLE',\n 'INSECURE_CERTIFICATE',\n 'INVALID_ARGUMENT',\n 'INVALID_COOKIE_DOMAIN',\n 'INVALID_COORDINATES',\n 'INVALID_ELEMENT_COORDINATES',\n 'INVALID_ELEMENT_STATE',\n 'INVALID_SELECTOR',\n 'INVALID_SESSION_ID',\n 'INVALID_XPATH_SELECTOR',\n 'INVALID_XPATH_SELECTOR_RETURN_TYPER',\n 'JAVASCRIPT_ERROR',\n 'METHOD_NOT_ALLOWED',\n 'MOVE_TARGET_OUT_OF_BOUNDS',\n 'NO_ALERT_OPEN',\n 'NO_SUCH_COOKIE',\n 'NO_SUCH_ELEMENT',\n 'NO_SUCH_FRAME',\n 'NO_SUCH_SHADOW_ROOT',\n 'NO_SUCH_WINDOW',\n 'SCRIPT_TIMEOUT',\n 'SESSION_NOT_CREATED',\n 'STALE_ELEMENT_REFERENCE',\n 'SUCCESS',\n 'TIMEOUT',\n 'UNABLE_TO_CAPTURE_SCREEN',\n 'UNABLE_TO_SET_COOKIE',\n 'UNEXPECTED_ALERT_OPEN',\n 'UNKNOWN_COMMAND',\n 'UNKNOWN_ERROR',\n 'UNKNOWN_METHOD',\n 'XPATH_LOOKUP_ERROR']\nerror_info = [19, 'invalid selector']\nexception_class = <class 'selenium.common.exceptions.WebDriverException'>\nmessage    = ''\nresponse   = {'status': 504,\n 'value': '<html>\\r\\n'\n          '<head><title>504 Gateway Time-out</title></head>\\r\\n'\n          '<body bgcolor=\"white\">\\r\\n'\n          '<center><h1>504 Gateway Time-out</h1></center>\\r\\n'\n          '<hr><center>nginx/1.14.2</center>\\r\\n'\n          '</body>\\r\\n'\n          '</html>'}\nscreen     = ''\nself       = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fc8fd8bb0b0>\nstacktrace = None\nstatus     = 504\nvalue      = ('<html>\\r\\n'\n '<head><title>504 Gateway Time-out</title></head>\\r\\n'\n '<body bgcolor=\"white\">\\r\\n'\n '<center><h1>504 Gateway Time-out</h1></center>\\r\\n'\n '<hr><center>nginx/1.14.2</center>\\r\\n'\n '</body>\\r\\n'\n '</html>')\nvalue_json = ('<html>\\r\\n'\n '<head><title>504 Gateway Time-out</title></head>\\r\\n'\n '<body bgcolor=\"white\">\\r\\n'\n '<center><h1>504 Gateway Time-out</h1></center>\\r\\n'\n '<hr><center>nginx/1.14.2</center>\\r\\n'\n '</body>\\r\\n'\n '</html>')\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py:196: WebDriverException","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"load_environment","time":{"start":1760534946669,"stop":1760534946669,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser_settings","time":{"start":1760535617263,"stop":1760535677954,"duration":60691},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: <html>\r\n<head><title>504 Gateway Time-out</title></head>\r\n<body bgcolor=\"white\">\r\n<center><h1>504 Gateway Time-out</h1></center>\r\n<hr><center>nginx/1.14.2</center>\r\n</body>\r\n</html>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 53, in run_old_style_hookwrapper\n    return result.get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/pluggy/_result.py\", line 103, in get_result\n    raise exc.with_traceback(tb)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n          ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/pluggy/_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 1196, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/_pytest/fixtures.py\", line 923, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"/home/runner/work/qa_guru_graduation_project_ui/qa_guru_graduation_project_ui/conftest.py\", line 180, in browser_settings\n    driver = webdriver.Remote(\n             ^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 263, in __init__\n    self.start_session(capabilities)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 366, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 458, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 196, in check_response\n    raise exception_class(value)\n","steps":[{"name":"Настройка параметров браузера","time":{"start":1760535617263,"stop":1760535677953,"duration":60690},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: <html>\r\n<head><title>504 Gateway Time-out</title></head>\r\n<body bgcolor=\"white\">\r\n<center><h1>504 Gateway Time-out</h1></center>\r\n<hr><center>nginx/1.14.2</center>\r\n</body>\r\n</html>\n\n","statusTrace":"  File \"/home/runner/work/qa_guru_graduation_project_ui/qa_guru_graduation_project_ui/conftest.py\", line 180, in browser_settings\n    driver = webdriver.Remote(\n             ^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 263, in __init__\n    self.start_session(capabilities)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 366, in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/selenium/webdriver/remote/webdriver.py\", line 458, in execute\n    self.error_handler.check_response(response)\n  File \"/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages/selenium/webdriver/remote/errorhandler.py\", line 196, in check_response\n    raise exception_class(value)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"context","time":{"start":1760535617263,"stop":1760535617263,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"full_opening_home_page","time":{"start":1760535711692,"stop":1760535731118,"duration":19426},"status":"passed","steps":[{"name":"Открываем главную страницу","time":{"start":1760535711692,"stop":1760535722000,"duration":10308},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Проверяем что главная страница открылась","time":{"start":1760535722000,"stop":1760535726931,"duration":4931},"status":"passed","steps":[{"name":"element('.home-hero__slider'): should be visible","time":{"start":1760535722000,"stop":1760535726931,"duration":4931},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Принимаем cookies","time":{"start":1760535726931,"stop":1760535729345,"duration":2414},"status":"passed","steps":[{"name":"element('.cookie-notice__content > .button'): double click","time":{"start":1760535726931,"stop":1760535729345,"duration":2414},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Закрываем плашку локации нажимая на крестик","time":{"start":1760535729345,"stop":1760535731118,"duration":1773},"status":"passed","steps":[{"name":"element('.header-city__question-button-close'): should be visible and be enabled","time":{"start":1760535729345,"stop":1760535730587,"duration":1242},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"element('.header-city__question-button-close'): click","time":{"start":1760535730587,"stop":1760535731117,"duration":530},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":8,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"feature","value":"Добавление товаров в корзину"},{"name":"epic","value":"Каталог/Корзина"},{"name":"tag","value":"ui"},{"name":"tag","value":"end_to_end"},{"name":"parentSuite","value":"tests.tests_catalog"},{"name":"suite","value":"test_add_smartphone_to_user_cart"},{"name":"subSuite","value":"TestAddSmartphoneToUserCart"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"2247-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.tests_catalog.test_add_smartphone_to_user_cart"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"expected_smartphone_name","value":"'Apple iPhone 17 256 ГБ зелёный'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":1,"skipped":0,"passed":5,"unknown":0,"total":6},"items":[{"uid":"6732b801c0d2ff14","reportUrl":"https://falinpavel.github.io/qa_guru_graduation_project_ui/5//#testresult/6732b801c0d2ff14","status":"passed","time":{"start":1760532911612,"stop":1760532951197,"duration":39585}},{"uid":"86076ad76858eac0","reportUrl":"https://falinpavel.github.io/qa_guru_graduation_project_ui/4//#testresult/86076ad76858eac0","status":"passed","time":{"start":1759917576709,"stop":1759917617102,"duration":40393}},{"uid":"874c798b2eddc477","reportUrl":"https://falinpavel.github.io/qa_guru_graduation_project_ui/3//#testresult/874c798b2eddc477","status":"passed","time":{"start":1759872503221,"stop":1759872536414,"duration":33193}},{"uid":"9007dbc5b71f4333","reportUrl":"https://falinpavel.github.io/qa_guru_graduation_project_ui/2//#testresult/9007dbc5b71f4333","status":"passed","time":{"start":1759870417550,"stop":1759870450800,"duration":33250}},{"uid":"73d4e01e071a6adb","reportUrl":"https://falinpavel.github.io/qa_guru_graduation_project_ui/1//#testresult/73d4e01e071a6adb","status":"passed","time":{"start":1759865606712,"stop":1759865664403,"duration":57691}}]},"tags":["ui","end_to_end"]},"source":"791531e7e16e6148.json","parameterValues":["'Apple iPhone 17 256 ГБ зелёный'"]}